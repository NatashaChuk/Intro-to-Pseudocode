1. What are some pros and cons of using linked lists instead of arrays?
	A: Some pros of using linked lists are that each node is 		  	   independent in memory, so it can be stored in an available 	  	   memory location. This is	beneficial over arrays as it allows 	   immense growth without the expense that arrays would have
	   for doing the same. A con is that elements can’t be accessed 	   immediately by index as in an array. Instead, elements must be 	   accessed sequentially starting from the first node, which can be 	   very inefficient. 


2. Come up with a real world example of a linked list.
	A: Thinking simply, I would think of a train as an example of a 	   linked list. It has a specified head and a tail. The coach body 	   could be viewed as the individual nodes in between.



Programming Questions

You may program the following questions in any language of your choice (JavaScript, Ruby, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

1.  The linked list push function should take a value, create a node, and add it to the end of a list.
    Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. 
    Submit both an explanation of the bug and a functional implementation of the method.



	A:  The bug in the pseudocode is in the lines “SET current to head  SET current.next to node”. 
	    You want the new node to be added to the end instead of the second spot. 

		class LinkedList {
		   constructor(){
			this.head= null;
            }
 
		push(element){
		  var newNode = {
		    value: element,
    		    next: null,
		};

		If (!LinkedList.head) {
		   LinkedList.head = newNode;
		} else {
		   let current = LinkedList.head;
		   while(current.next != null) {
			current = current.next;
		   }
		   current.next = newNode;
		 }
		
	    }


	    removeDuplicates() {
		var singles = [];
		var current = Linkedlist.head; 
		singles.push(current.value);

		while(current.next != null){
		   if(singles.includes(current.next.value)){
		       current = current.next;
		   } else {
		      current = current.next;
		      singles.push(current.value);
		   }
		}
		return singles;
	     }
		

          reverse() {
		  var list = [];
  		  var reversedList = [];
		 
 		  var current = LinkedList.head;
		  list.push(current.value);
		
		  while(current.next != null) {
        	    current = current.next;
		    list.push(current.value);
		  }

		  for(let i= list.length -1; i >= 0; i--) {
		    reversedList.push(list[i]);
		  }
		
		  return reversedList;
 		  }
	       }

		var test = new LinkedList();

		test.push(‘developer’);
		test.push(‘designer’);

		test.removeDuplicate();
		test.reverse();	
